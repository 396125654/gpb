#! /usr/bin/env escript
%%! -*- erlang -*-
%%! -noinput +B -sasl errlog_type error
-mode(compile).

%% Process a file, look for "Thanks to Some Name."
%% or "Thanks to Some Other Name for ..."
%% or "Thanks to Some One and Someone Else for ...".
main([File])       -> doit(File);
main([])           -> doit("ChangeLog").

doit(File) ->
    print(
      process(
        string:tokens(binary_to_list(begin {ok,B}=file:read_file(File),
                                           B
                                     end),
                      "\n\t "))),
    halt(0).

print(Contributors) -> [io:format("~ts~n", [C]) || C <- Contributors].

process(Words) -> lists:usort(extract_thanks(Words)).

extract_thanks(["thanks","to" | Rest]) -> extract_thank(Rest, []);
extract_thanks(["Thanks","to" | Rest]) -> extract_thank(Rest, []);
extract_thanks([_Word | Rest])         -> extract_thanks(Rest);
extract_thanks([])                     -> [].

extract_thank(["for" | Rest], Acc) -> [join_acc(Acc) | extract_thanks(Rest)];
extract_thank(["and" | Rest], Acc) -> [join_acc(Acc) | extract_thank(Rest, [])];
extract_thank([X | Rest], Acc) ->
    case is_punctuation(X) of
        {true, Text} -> [join_acc([Text | Acc]) | extract_thanks(Rest)];
        false        -> extract_thank(Rest, [X | Acc])
    end;
extract_thank([], Acc) ->
    [join_acc(Acc)].

join_acc(Acc) -> string:join(lists:reverse(Acc), " ").

is_punctuation(S) -> is_punct_2(S, "").
is_punct_2("."++_, Acc) -> {true, lists:reverse(Acc)};
is_punct_2(","++_, Acc) -> {true, lists:reverse(Acc)};
is_punct_2([C|Tl], Acc) -> is_punct_2(Tl, [C|Acc]);
is_punct_2("", _Acc)    -> false.

